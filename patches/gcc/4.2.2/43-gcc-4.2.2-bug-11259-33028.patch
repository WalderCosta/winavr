Fix for GCC bugs #11259 and #33028.
Index: gcc/recog.c
===================================================================
--- gcc/recog.c	(revision 127799)
+++ gcc/recog.c	(working copy)
@@ -2968,6 +2968,9 @@
 		  /* If an insn has RTX_FRAME_RELATED_P set, peephole
 		     substitution would lose the
 		     REG_FRAME_RELATED_EXPR that is attached.  */
+		  for (i = 0; i < MAX_INSNS_PER_PEEP2 + 1; ++i)
+		    peep2_insn_data[i].insn = NULL_RTX;
+		  peep2_insn_data[peep2_current].insn = PEEP2_EOB;
 		  peep2_current_count = 0;
 		  try = NULL;
 		}
Index: gcc/config/avr/avr.md
===================================================================
--- gcc/config/avr/avr.md	(revision 127799)
+++ gcc/config/avr/avr.md	(working copy)
@@ -1468,18 +1468,82 @@
   [(set_attr "length" "0,4,4,10")
    (set_attr "cc" "none,clobber,set_n,clobber")])
 
+(define_insn "rotlqi3"
+  [(set (match_operand:QI 0 "register_operand" "=r")
+	(rotate:QI (match_operand:QI 1 "register_operand" "0")
+		   (const_int 4)))]
+  ""
+  "swap %0"
+  [(set_attr "length" "1")
+   (set_attr "cc" "none")])
+
 ;; >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >>
 ;; logical shift right
 
-(define_insn "lshrqi3"
+(define_expand "lshrqi3"
   [(set (match_operand:QI 0 "register_operand"             "=r,r,r,r,!d,r,r")
 	(lshiftrt:QI (match_operand:QI 1 "register_operand" "0,0,0,0,0,0,0")
 		     (match_operand:QI 2 "general_operand"  "r,L,P,K,n,n,Qm")))]
   ""
+  "")
+
+(define_insn_and_split "*lshrqi3_const4"
+  [(set (match_operand:QI 0 "d_register_operand"             "=d")
+	(lshiftrt:QI (match_operand:QI 1 "d_register_operand" "0")
+		     (const_int 4)))]
+  ""
+  "#"
+  ""
+  [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))
+   (set (match_dup 0) (and:QI (match_dup 0) (const_int 15)))]
+  "")
+
+(define_insn_and_split "*lshrqi3_const5"
+  [(set (match_operand:QI 0 "d_register_operand"             "=d")
+	(lshiftrt:QI (match_operand:QI 1 "d_register_operand" "0")
+		     (const_int 5)))]
+  ""
+  "#"
+  ""
+  [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))
+   (set (match_dup 0) (lshiftrt:QI (match_dup 0) (const_int 1)))
+   (set (match_dup 0) (and:QI (match_dup 0) (const_int 7)))]
+  "")
+
+(define_insn_and_split "*lshrqi3_const6"
+  [(set (match_operand:QI 0 "d_register_operand"             "=d")
+	(lshiftrt:QI (match_operand:QI 1 "d_register_operand" "0")
+		     (const_int 6)))]
+  ""
+  "#"
+  ""
+  [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))
+   (set (match_dup 0) (lshiftrt:QI (match_dup 0) (const_int 2)))
+   (set (match_dup 0) (and:QI (match_dup 0) (const_int 3)))]
+  "")
+
+(define_insn "*lshrqi3"
+  [(set (match_operand:QI 0 "register_operand"             "=r,r,r,r,!d,r,r")
+	(lshiftrt:QI (match_operand:QI 1 "register_operand" "0,0,0,0,0,0,0")
+		     (match_operand:QI 2 "general_operand"  "r,L,P,K,n,n,Qm")))]
+  ""
   "* return lshrqi3_out (insn, operands, NULL);"
   [(set_attr "length" "5,0,1,2,4,6,9")
    (set_attr "cc" "clobber,none,set_czn,set_czn,set_czn,set_czn,clobber")])
 
+(define_peephole2 ; andi
+  [(set (match_operand:QI 0 "d_register_operand" "")
+        (and:QI (match_dup 0)
+	        (match_operand:QI 1 "const_int_operand" "")))
+   (set (match_dup 0)
+        (and:QI (match_dup 0)
+	        (match_operand:QI 2 "const_int_operand" "")))]
+  ""
+  [(set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]
+  {
+    operands[1] = GEN_INT (INTVAL (operands[1]) & INTVAL (operands[2]));
+  })
+
 (define_insn "lshrhi3"
   [(set (match_operand:HI 0 "register_operand"             "=r,r,r,r,r,r,r")
 	(lshiftrt:HI (match_operand:HI 1 "register_operand" "0,0,0,r,0,0,0")
